name: CD/CI
run-name: Build Job ${{ github.event.head_commit.message }} by @${{ github.actor }}
env:
 BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
permissions:
  contents: write
  pages: write
  id-token: write
jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        flake8 ./lib/*.py ./tests/*.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 ./lib/*.py ./tests/*.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Lint with pylint
      run: |
        pylint ./lib/*.py ./tests/*.py --exit-zero
  
  test:
    name: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest coverage
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test with pytest
      run: |
        pytest
  
  build:
    needs: [lint, test]
    name: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Build with hatch
      run: |
        python -m build
    - uses: actions/upload-artifact@v2
      with:
        name: applicativo
        path: |
          ./dist/genomic-*-py3-none-any.whl
          ./dist/genomic-*.tar.gz

  distribute:
    needs: [build]
    name: distribute
    runs-on: ubuntu-latest
    steps:
    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v3
    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest-${{ env.BRANCH_NAME }}"
        prerelease: true
        title: "Latest ${{ env.BRANCH_NAME }} Build"
        files: |
          ./applicativo/genomic-*-py3-none-any.whl
          ./applicativo/genomic-*.tar.gz
  
  documentation:
    needs: [build]
    name: documentation
    if: github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs "mkdocstrings[python]" mkdocs-material
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Create documentation with mkdocs
      run: |
        python -m mkdocs build
    - name: Configure Pages
      uses: actions/configure-pages@v2
    - name: Zip and Upload Artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: './site'
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v1